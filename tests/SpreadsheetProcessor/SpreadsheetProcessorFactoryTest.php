<?php
namespace cymapgt\core\application\spreadsheet\SpreadsheetProcessor;

use cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory;
use cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-29 at 14:41:33.
 */
class SpreadsheetProcessorFactoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SpreadsheetProcessorFactory
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->fileDir = '/var/www/html/cymapgt/core/application/spreadsheet/tests/SpreadsheetProcessor/spffiles/';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        //some housekeeping in the test excel files folder
        /*$files = scandir(($this->fileDir . 'files/spreadsheet'));
        foreach ($files as $fileName) {
            $fileNameFq = $this->fileDir  . 'files/spreadsheet/' . $fileName;
            
            if (
                file_exists($fileNameFq)
                && !($fileName[0] == '.')
            ) {
                unlink($fileNameFq);   
            }
        }    */    
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::getInstance
     */
    public function testGetInstance()
    {
        //Instantiate our factory
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $this->assertEquals(true, $xlFactory instanceof SpreadsheetProcessorFactory);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::__clone
     */
    public function test__cloneException()
    {
        $this->setExpectedException(
            'cymapgt\Exception\SpreadsheetProcessorFactoryException'
        );
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactoryClone = clone($xlFactory);
        $xlFactoryClone::initialize();
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::setBaseDir
     */
    public function testSetBaseDirException()
    {
         $this->setExpectedException(
            'cymapgt\Exception\SpreadsheetProcessorFactoryException'
        );
        SpreadsheetProcessorFactory::setBaseDir(('z:/i_dont_exist/'));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::setCacheMethod
     */
    public function testSetCacheMethod()
    {
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactory::initialize();
        $this->assertEquals(false, $xlFactory->setCacheMethod('Memcache'));
        //$this->assertEquals(true, $xlFactory->setCacheMethod('APC'));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::getCacheMethod
     */
    public function testGetCacheMethod()
    {
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactory::initialize();
        $xlFactory->setCacheMethod('Memory');
        $cacheMethod = $xlFactory->getCacheMethod(SPREADSHEETPROCESSOR_CACHEGETCUR);
        //$this->assertEquals(\PHPExcel_CachedObjectStorageFactory::cache_in_memory, $cacheMethod);
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::resetCacheMethod
     */
    public function testResetCacheMethod()
    {
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactory::initialize();
        $xlFactory->setCacheMethod('APC');
        $cacheMethod = $xlFactory->getCacheMethod(SPREADSHEETPROCESSOR_CACHEGETCUR);
        //$this->assertEquals(\PHPExcel_CachedObjectStorageFactory::cache_to_apc, $cacheMethod);
        $xlFactory->resetCacheMethod();
        $cacheMethod2 = $xlFactory->getCacheMethod(SPREADSHEETPROCESSOR_CACHEGETCUR);        
        //$this->assertEquals(\PHPExcel_CachedObjectStorageFactory::cache_in_memory, $cacheMethod2);
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::createFile
     */
    public function testCreateFile()
    {
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactory::initialize();
        $xlFactory::setBaseDir($this->fileDir);     
        $xlObj = $xlFactory->createFile('tmp', true, 'Excel2007', true);
        $xlObj->writeCell(0, 1, 'Hello World');
        $xlObj->Save();
        
        $this->assertEquals(true, $xlObj instanceof SpreadsheetProcessor);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::openFile
     */
    public function testOpenFile()
    {
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactory::initialize();
        $xlFactory::setBaseDir($this->fileDir);
        $fileName = 'tmp';
        $xlObj = $xlFactory->openFile($fileName);
        $this->assertEquals(true, $xlObj instanceof SpreadsheetProcessor);        
        $wSheetObj = $xlObj->getActiveSheet();
        $cellVal = $wSheetObj->getCellByColumnAndRow('A1')->getValue();
        $this->assertEquals('Hello World', $cellVal);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::addValueBinder
     */
    public function testAddValueBinder()
    {
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactory::initialize();        
        $this->assertEquals(false, $xlFactory->addValueBinder('fake', 'fakeObj'));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::setValueBinder
     */
    public function testSetValueBinder()
    {
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactory::initialize();        
        $this->assertEquals(false, $xlFactory->setValueBinder('falseOne'));
        $this->assertEquals(true, $xlFactory->setValueBinder('advanced'));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessorFactory::getValueBinder
     */
    public function testGetValueBinder()
    {
        $xlFactory = SpreadsheetProcessorFactory::getInstance();
        $xlFactory::initialize();    
        $xlFactory->setValueBinder();
        $this->assertEquals('default', $xlFactory->getValueBinder());
    }
}
