<?php
namespace cymapgt\core\application\spreadsheet\SpreadsheetProcessor;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-28 at 23:03:30.
 */
class SpreadsheetProcessorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SpreadsheetProcessor
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->fileDir = '/var/www/html/cymapgt/core/application/spreadsheet/tests/SpreadsheetProcessor/spffiles/files/spreadsheet';
        $this->imagePath = '/var/www/html/cymapgt/core/application/spreadsheet/tests/SpreadsheetProcessor/testimg/logo.png';
            
        $this->object = new SpreadsheetProcessor(
                'sp.test', $this->fileDir
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        //close the workbook
        $this->object->close();
        
        //some housekeeping in the test excel files folder
        $files = scandir($this->fileDir);
        foreach ($files as $fileName) {
            $fileNameFq = $this->fileDir . $fileName;
            
            if (
                file_exists($fileNameFq)
                && !($fileName[0] == '.')
            ) {
                unlink($fileNameFq);   
            }
        }        
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::newSheet
     */
    public function testNewSheet()
    {
        $index = 1;
        $this->assertEquals(true, $this->object->newSheet($index));
    }
    
    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::addSheet
     */
    public function testAddSheet()
    {
        //test with external = false
        $wSheetObj = new \PHPExcel_Worksheet;
        $wSheetObj->setTitle('WorksheetExtFalse');
        $external  = false;
        $index     = true;
        $this->assertEquals(true, $this->object->addSheet($wSheetObj, $external, $index));
        
        //test with external = true. You will require a 2nd PHPExcel instance for this to work
        $objPhpXl2 = new \PHPExcel;
        $wSheetObj2 = $objPhpXl2->getActiveSheet();
        $wSheetObj2->setTitle('WorksheetExtTrue');
        $this->assertEquals(true, $this->object->addSheet($wSheetObj2, true, $index));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getActiveSheet
     */
    public function testGetActiveSheet()
    {
        $this->assertEquals(true, $this->object->getActiveSheet() instanceof \PHPExcel_Worksheet);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setActiveSheet
     */
    public function testSetActiveSheet()
    {
        //add the worksheet
        $wSheetObj = new \PHPExcel_Worksheet;
        $wSheetObj->setTitle('Worksheet2');
        $external  = false;
        $index     = true;
        $this->object->addSheet($wSheetObj, $external, $index);
        
        $this->object->setActiveSheet('Worksheet2', true);
        $wSheetTitle = $this->object->getActiveSheet()->getTitle();
        
        $this->assertEquals('Worksheet2', $wSheetTitle);
        
        $this->object->setActiveSheet(0);
        $wSheetTitle2 = $this->object->getActiveSheet()->getTitle();
        
        $this->assertEquals('Worksheet', $wSheetTitle2);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getAllSheets
     */
    public function testGetAllSheets()
    {
        //add the worksheet
        $wSheetObj = new \PHPExcel_Worksheet;
        $wSheetObj->setTitle('Worksheet2');
        $external  = false;
        $index     = true;
        $this->object->addSheet($wSheetObj, $external, $index);
        
        $allSheets = $this->object->getAllSheets();
        
        $this->assertEquals(true, is_array($allSheets));
        $this->assertEquals(2, count($allSheets));
        
        foreach ($allSheets as $wSheetObj) {
            $this->assertEquals(true, $wSheetObj instanceof \PHPExcel_Worksheet);
        }
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getSheet
     */
    public function testGetSheet()
    {
        $wSheetObj = $this->object->getSheet();
        $this->assertEquals(true, $wSheetObj instanceof \PHPExcel_Worksheet);
        $this->assertEquals('Worksheet', $wSheetObj->getTitle());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::removeSheet
     */
    public function testRemoveSheet()
    {
         //add the worksheet
        $wSheetObj = new \PHPExcel_Worksheet;
        $wSheetObj->setTitle('Worksheet2');
        $external  = false;
        $index     = true;
        $this->object->addSheet($wSheetObj, $external, $index);

        //add the second worksheet
        $wSheetObj2 = new \PHPExcel_Worksheet;
        $wSheetObj2->setTitle('Worksheet3');
        $external2  = false;
        $index2     = true;
        $this->object->addSheet($wSheetObj2, $external2, $index2);
        
        //Using index 2 it seems worksheet 3 will be added b/w the original one and the first one we added
        $this->assertEquals(true, $this->object->removeSheet(2));
        $this->assertEquals(true, $this->object->removeSheet('Worksheet3', true));
        
        $allSheets = $this->object->getAllSheets();
        
        $this->assertEquals(1, count($allSheets));
        $wSheetObj3 = $allSheets[0];
        
        $this->assertEquals('Worksheet', $wSheetObj3->getTitle());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getSheetCount
     */
    public function testGetSheetCount()
    {
        $this->assertInternalType('int', $this->object->getSheetCount());
        $this->assertEquals(1, $this->object->getSheetCount());
        
        //add the worksheet
        $wSheetObj = new \PHPExcel_Worksheet;
        $wSheetObj->setTitle('Worksheet2');
        $external  = false;
        $index     = true;
        $this->object->addSheet($wSheetObj, $external, $index);
        
        $this->assertEquals(2, $this->object->getSheetCount());

        //add the second worksheet
        $wSheetObj2 = new \PHPExcel_Worksheet;
        $wSheetObj2->setTitle('Worksheet3');
        $external2  = false;
        $index2     = true;
        $this->object->addSheet($wSheetObj2, $external2, $index2);
        
        $this->assertEquals(3, $this->object->getSheetCount());
        $this->object->removeSheet(2);
                
        $this->assertEquals(2, $this->object->getSheetCount());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setProperties
     */
    public function testSetProperties()
    {
        //return true if properties are set
        $this->assertEquals(true, $this->object->setProperties(array('keywords' => 'test properties')));
        
        //return false if custom property is not an array
        $this->assertEquals(false, $this->object->setProperties(array('custom' => 'not custom array')));
        
        //if custom property is array, we are good to go
        $this->assertEquals(true, $this->object->setProperties(array('custom' => array(0=>'Operating System',1=>'Windows'))));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setHyperlink
     */
    public function testSetHyperlink()
    {
        //wrong settings should return false
        $this->assertEquals(
            false,
            $this->object->setHyperlink(
                'www.goingnowhere.com',
                'this won\'t fly',
                'FAKECOORD'
            )
        );
        
        //should allow this, using numeric coord
        $this->assertEquals(
            true,
            $this->object->setHyperlink(
                'www.cymapk.com',
                'i\'m going home :)',
                'NUMERIC'
            )
        );
        
        //should allow this using text coord
        $this->assertEquals(
            true,
            $this->object->setHyperlink(
                'www.cymapk.com',
                'i\'m going home :)',
                'TEXT',
                'A10'
            )
        );        
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getHyperlink
     */
    public function testGetHyperlink()
    {
        //should allow this using text coord
        $this->assertEquals(
            true,
            $this->object->setHyperlink(
                'www.cymapk.com',
                'i\'m going home :)',
                'TEXT',
                'A10'
            )
        );
        
        $this->assertInternalType('array', $this->object->getHyperlink('TEXT','A10'));
        $this->assertEquals('www.cymapk.com', $this->object->getHyperlink('TEXT','A10')['link']);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setFirstPageNumber
     */
    public function testSetFirstPageNumber()
    {
        //we are resetting first page number
        $this->assertEquals(true, $this->object->setFirstPageNumber());
        $this->assertEquals(false, $this->object->setFirstPageNumber(0, true, 3));
        $this->assertEquals(false, $this->object->setFirstPageNumber(0, true, false, '19')); 
        
        //string from error
        $this->assertInternalType('string', $this->object->setFirstPageNumber(10, true, false, 10));
    }
   
    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getFirstPageNumber
     */
    public function testGetFirstPageNumber()
    {
        $this->object->setFirstPageNumber(0, true, false, 10);
        $this->assertEquals(10, $this->object->getFirstPageNumber());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setFitToHeight
     */
    public function testSetFitToHeight()
    {
        $this->assertEquals(true, $this->object->setFitToHeight());
        $this->assertInternalType('string', $this->object->setFitToHeight(10, true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getFitToHeight
     */
    public function testGetFitToHeight()
    {
        $this->assertInternalType('int', $this->object->getFitToHeight());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setFitToPage
     */
    public function testSetFitToPage()
    {
        $this->assertEquals(true, $this->object->setFitToPage());
        $this->assertInternalType('string', $this->object->setFitToPage(10, true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getFitToPage
     */
    public function testGetFitToPage()
    {
        $this->assertInternalType('int', $this->object->getFitToHeight());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setFitToWidth
     */
    public function testSetFitToWidth()
    {
        $this->assertEquals(true, $this->object->setFitToWidth());
        $this->assertInternalType('string', $this->object->setFitToWidth(10,true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getFitToWidth
     */
    public function testGetFitToWidth()
    {
        $this->assertInternalType('int', $this->object->getFitToWidth());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setHorizontalCentered
     */
    public function testSetHorizontalCentered()
    {
        $this->assertEquals(true, $this->object->setHorizontalCentered());
        $this->assertInternalType('string', $this->object->setHorizontalCentered(10, true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getHorizontalCentered
     */
    public function testGetHorizontalCentered()
    {
        $this->assertInternalType('bool', $this->object->getHorizontalCentered());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setOrientation
     */
    public function testSetOrientation()
    {
        $this->assertEquals(true, $this->object->setOrientation());
        $this->assertInternalType('string', $this->object->setOrientation(10, true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getOrientation
     */
    public function testGetOrientation()
    {
        $this->assertInternalType('string', $this->object->getOrientation());
        $this->object->setOrientation(0, true, 'landscape');
        $this->assertEquals('landscape', $this->object->getOrientation());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setPaperSize
     */
    public function testSetPaperSize()
    {
        $this->assertEquals(true, $this->object->setPaperSize());
        $this->assertInternalType('string', $this->object->setPaperSize(10, true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getPaperSize
     */
    public function testGetPaperSize()
    {
        $this->assertInternalType('int', $this->object->getPaperSize());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setPrintArea
     */
    public function testSetPrintArea()
    {
        //numeric should pick other defaults
        $this->assertEquals(true, $this->object->setPrintArea('NUMERIC'));
        
        //text should expect cell coord range to be set
        $this->assertInternalType('string', $this->object->setPrintArea('TEXT'));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getPrintArea
     */
    public function testGetPrintArea()
    {
        $this->assertInternalType('bool', $this->object->getPrintArea(0, true, 0, true));
        $this->assertInternalType('null', $this->object->getPrintArea(0, true, 0, false));
        $this->object->setPrintArea('NUMERIC');
        $this->assertInternalType('string', $this->object->getPrintArea(0, true, 0, false));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::clearPrintArea
     */
    public function testClearPrintArea()
    {
        $this->object->setPrintArea('NUMERIC');
        $this->assertInternalType('string', $this->object->getPrintArea(0, true, 0, false));
        $this->object->clearPrintArea(0, true, 0);
        $this->assertInternalType('null', $this->object->getPrintArea(0, true, 0, false));    
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setRepeatCols
     */
    public function testSetRepeatCols()
    {
        $this->assertEquals(true, $this->object->setRepeatCols(0, true, 'STARTEND', null, 'A', 'H'));
        $this->assertEquals(true, $this->object->setRepeatCols(0, true, 'ARRAY', array(0 => 1, 1 => 8)));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getRepeatCols
     */
    public function testGetRepeatCols()
    {
        $this->assertInternalType('array', $this->object->getRepeatCols());
        $this->assertInternalType('bool', $this->object->getRepeatCols(0, true, true));
        $this->object->setRepeatCols(0, true, 'STARTEND', null, 'A', 'H');
        $repeatColsArr = $this->object->getRepeatCols();
        $this->assertEquals('A', $repeatColsArr[0]);
        $this->assertEquals('H', $repeatColsArr[1]);
        $this->assertEquals(true, $this->object->getRepeatCols(0, true, true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setRepeatRows
     */
    public function testSetRepeatRows()
    {
        $this->assertEquals(true, $this->object->setRepeatRows(0, true, 'STARTEND', null, 'A', 'H'));
        $this->assertEquals(true, $this->object->setRepeatRows(0, true, 'ARRAY', array(0 => 1, 1 => 8)));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getRepeatRows
     */
    public function testGetRepeatRows()
    {
        $this->object->setRepeatRows(0, true, 'STARTEND', null, 1, 1);
        $repeatRowsArr = $this->object->getRepeatRows();
        $this->assertEquals(1, $repeatRowsArr[0]);
        $this->assertEquals(1, $repeatRowsArr[1]);
        $this->assertEquals(true, $this->object->getRepeatRows(0, true, true));       
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setScale
     */
    public function testSetScale()
    {
        $this->assertEquals(true, $this->object->setScale());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getScale
     */
    public function testGetScale()
    {
        $this->object->setScale(0, true, 80);
        $this->assertEquals(80, $this->object->getScale());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setVerticalCentered
     */
    public function testSetVerticalCentered()
    {
        //turn on vertical centering
        $this->assertEquals(true, $this->object->setVerticalCentered(0, true, true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getVerticalCentered
     */
    public function testGetVerticalCentered()
    {
        $this->object->setVerticalCentered(0, true, true);
        $this->assertEquals(true, $this->object->getVerticalCentered());
        $this->object->setVerticalCentered(0, true, false);
        $this->assertEquals(false, $this->object->getVerticalCentered());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getWorksheet
     */
    public function testGetWorksheet()
    {
        $this->assertEquals(true, $this->object->getWorksheet() instanceof \PHPExcel_Worksheet);
    }
    
    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getWorksheet
     */
    public function testGetWorksheetException()
    {
        $this->setExpectedException(
            '\PHPExcel_Exception'
        );
        
        $this->object->getWorksheet(10, true);
    }    

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setMargin
     */
    public function testSetMargin()
    {
        $this->assertEquals(true, $this->object->setMargin());
        $pValueArr = array(
            'top' => 0.75,
            'bottom' => 0.75,
            'left' => 0.75,
            'right' => 0.75,
            'header' => 0.75,
            'footer' => 0.75
        );
        $this->assertEquals(true, $this->object->setMargin(0, true, 0, $pValueArr)); //array of pvalues must be set
        $pValueArr2 = array(
            'top' => 0.75,
            'bottom' => 0.75
        );        
        $this->assertEquals(true, $this->object->setMargin(0, true, array('top' => 'top','bottom' => 'bottom'), $pValueArr2));
        $this->assertEquals(false, $this->object->setMargin(0, true, 'top', $pValueArr));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getMargin
     */
    public function testGetMargin()
    {
        $this->assertInternalType('float', $this->object->getMargin(0, true, 'top'));
        $this->assertInternalType('array', $this->object->getMargin(0, true, 0));
        $this->assertEquals(6, count($this->object->getMargin(0, true, 0)));
        $this->assertInternalType('array', $this->object->getMargin(0, true, array('header' => 'header','footer' => 'footer','bottom' => 'bottom')));
        $this->assertEquals(3, count($this->object->getMargin(0, true, array('header' => 'header','footer' => 'footer','bottom' => 'bottom'))));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setHFAlignWithMargins
     */
    public function testSetHFAlignWithMargins()
    {
        $this->assertEquals(true, $this->object->setHFAlignWithMargins());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getHFAlignWithMargins
     */
    public function testGetHFAlignWithMargins()
    {
        $this->object->setHFAlignWithMargins(0, true, false); // seems it is always on by default, try turning it off first
        $this->assertEquals(false, $this->object->getHFAlignWithMargins());
        $this->object->setHFAlignWithMargins();
        $this->assertEquals(true, $this->object->getHFAlignWithMargins());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setHFDifferentFirst
     */
    public function testSetHFDifferentFirst()
    {
        $this->assertEquals(true, $this->object->setHFDifferentFirst());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getHFDifferentFirst
     */
    public function testGetHFDifferentFirst()
    {
        $this->assertEquals(false, $this->object->getHFDifferentFirst());
        $this->object->setHFDifferentFirst();
        $this->assertEquals(true, $this->object->getHFDifferentFirst());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setHFDifferentOddEven
     */
    public function testSetHFDifferentOddEven()
    {
        $this->assertEquals(true, $this->object->setHFDifferentOddEven());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getHFDifferentOddEven
     */
    public function testGetHFDifferentOddEven()
    {
        $this->assertEquals(false, $this->object->getHFDifferentOddEven());
        $this->object->setHFDifferentOddEven();
        $this->assertEquals(true, $this->object->getHFDifferentOddEven());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setHFSections
     */
    public function testSetHFSections()
    {
        $this->assertEquals(true, $this->object->setHFSections());
        
        $sectionArray = array(
            'evenfooter'  => 'setEvenFooter',
            'evenheader'  => 'setEvenHeader',
            'firstfooter' => 'setFirstFooter',
            'firstheader' => 'setFirstHeader',
            'oddfooter'   => 'setOddFooter',
            'oddheader'   => 'setOddHeader'
        );
        
        $this->assertEquals(true, $this->object->setHFSections(0, true, 0, $sectionArray));

        $sectionArray2 = array(
            'evenfooter'  => 'setEvenFooter',
            'firstheader' => 'setFirstHeader'
        );
        $this->assertEquals(true, $this->object->setHFSections(0, true, array('evenfooter' => 'evenfooter','firstheader' => 'firstheader'),$sectionArray2));        
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getHFSections
     */
    public function testGetHFSections()
    {
        $this->assertInternalType('string', $this->object->getHFSections(0, true, 'oddfooter'));

        $this->assertInternalType('array', $this->object->getHFSections(0, true, 0));
        $this->assertEquals(6, count($this->object->getHFSections(0, true, 0)));
        
        $sectionArray2 = array(
            'evenfooter'  => 'setEvenFooter',
            'firstheader' => 'setFirstHeader'
        );
        $this->object->setHFSections(0, true, array('evenfooter' => 'evenfooter','firstheader' => 'firstheader'), $sectionArray2);
        $this->assertEquals('setFirstHeader', $this->object->getHFSections(0, true, array('evenfooter' => 'evenfooter','firstheader' => 'firstheader')['firstheader']));       
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setHFScaleWithDocument
     */
    public function testSetHFScaleWithDocument()
    {
        $this->assertEquals(true, $this->object->setHFScaleWithDocument());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getHFScaleWithDocument
     */
    public function testGetHFScaleWithDocument()
    {
        $this->object->setHFScaleWithDocument(0, true, false); //seems it was on by default
        $this->assertEquals(false, $this->object->getHFScaleWithDocument());
        $this->object->setHFScaleWithDocument(0, true, true);
        $this->assertEquals(true, $this->object->getHFScaleWithDocument());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::addDrawingObject
     */
    public function testAddDrawingObject()
    {
        $this->assertInternalType('array', $this->object->addDrawingObject(0, true, $this->imagePath));
        $this->assertEquals(2, count($this->object->addDrawingObject(0, true, $this->imagePath)));
        $drawingObjArr = $this->object->addDrawingObject(0, true, $this->imagePath);
        $this->assertEquals(true, $drawingObjArr['object'] instanceof \PHPExcel_Worksheet_Drawing);
        $this->assertEquals('imageObj2', $drawingObjArr['name']);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getDrawingObjects
     */
    public function testGetDrawingObjects()
    {
        $this->assertInternalType('array', $this->object->addDrawingObject(0, true, $this->imagePath));        
        $this->assertEquals(false, $this->object->getDrawingObjects(0, true, 'fakeDrawing'));
        $this->assertEquals(true, $this->object->getDrawingObjects(0, true, 'imageObj') instanceof \PHPExcel_Worksheet_Drawing);
        $this->assertInternalType('array', $this->object->addDrawingObject(0, true, $this->imagePath));
        //note that original image will have the name imageObj, not imageObj0
        $this->assertEquals(true, $this->object->getDrawingObjects(0, true, 'imageObj1') instanceof \PHPExcel_Worksheet_Drawing);
        $this->assertEquals(2, count($this->object->getDrawingObjects()));
        $drawingObjs = $this->object->getDrawingObjects();
        foreach ($drawingObjs as $dObj) {
            $this->assertEquals(true, $dObj instanceof \PHPExcel_Worksheet_Drawing);
        }
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setStyle
     */
    public function testSetStyle()
    {
        $styleArray = array(
             'font' => array(
               'name' => 'Arial',
               'size' => '8',
             ),
             'borders' => array(
               'left' => array(
                 'style' => \PHPExcel_Style_Border::BORDER_THIN,
               ),
               'right' => array(
                 'style' => \PHPExcel_Style_Border::BORDER_THIN,
               ),
               'bottom' => array(
                 'style' => \PHPExcel_Style_Border::BORDER_NONE,
               ), 
             ),
             'fill' => array(
               'type' => \PHPExcel_Style_Fill::FILL_SOLID,
               'startcolor' => array(
                 'argb' => 'FFFFFFCC',
               ),
             ),
           );
        //use numeric reference of $col and $row
        $this->assertEquals(true, $this->object->setStyle(0, true, 3, 4, $styleArray));
        //to coords now, can use it for a big range :)
        $this->assertEquals(true, $this->object->setStyle(0, true, 'A1:', 'G14', $styleArray, true));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getStyle
     */
    public function testGetStyle()
    {
        $this->assertEquals(true, $this->object->getStyle(0, true, 3, 5) instanceof \PHPExcel_Style);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::setMergeCells
     */
    public function testSetMergeCells()
    {
        //numeric coords
        $this->assertEquals(true, $this->object->setMergeCells('NUMERIC'));
        
        //text coords
        $this->assertEquals(true, $this->object->setMergeCells('TEXT', 0, true, 'B5:D10'));
        
        //array coords
        $this->assertEquals(true, $this->object->setMergeCells('ARRAY', 0, true, array(0, 10) ));
        
        //fake coords
        $this->assertEquals(false, $this->object->setMergeCells('FAKE'));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getMergeCells
     */
    public function testGetMergeCells()
    {
        $this->assertInternalType('array', $this->object->getMergeCells());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\SpreadsheetProcessor::getRangeCoordsFromArray
     */
    public function testGetRangeCoordsFromArray()
    {
        $coordsArr = array(
            array('col' => 1, 'row' => 15),
            array('col' => 13, 'row' => 20)
        );
        
        $this->assertEquals('A15:M20', $this->object->getRangeCoordsFromArray($coordsArr, false));
    }
}
