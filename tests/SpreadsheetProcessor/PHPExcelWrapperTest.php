<?php
namespace cymapgt\core\application\spreadsheet\SpreadsheetProcessor;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-04-28 at 23:02:53.
 */
class PHPExcelWrapperTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var PHPExcelWrapper
     */
    protected $object;
    
    /**
     * @var fileDir
     */
    protected $fileDir;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->fileDir = '/var/www/html/cymapgt/core/application/spreadsheet/tests/SpreadsheetProcessor/spffiles/files/spreadsheet';
            
        $this->object = new PHPExcelWrapper(
                'test', $this->fileDir
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        //close the workbook
        $this->object->close();
        
        //some housekeeping in the test excel files folder
        $files = scandir($this->fileDir);
        foreach ($files as $fileName) {
            $fileNameFq = $this->fileDir . $fileName;
            
            if (
                file_exists($fileNameFq)
                && !($fileName[0] == '.')
            ) {
                unlink($fileNameFq);   
            }
        }  
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setXlObj
     */
    public function testSetXlObj() {
        $phpXlObj = new \PHPExcel();
        $this->object->setXlObj($phpXlObj, 0);
        $this->assertEquals(1, true);
        
        $phpXlReaderObj = new \PHPExcel_Reader_Excel2007($phpXlObj);
        $this->object->setXlObj($phpXlReaderObj, 1);
        $this->assertEquals(1, true);
        
        $phpXlWriterObj = new \PHPExcel_Writer_Excel2007($phpXlObj);
        $this->object->setXlObj($phpXlWriterObj, 2);
        $this->assertEquals(2, true);
    }
    
    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setXlObj
     */
     public function testSetXlObjException() {
        $this->setExpectedException(
            'cymapgt\Exception\SpreadsheetProcessorException',
            'Object of wrong type passed to setXlObj. Type expected is Excel'
        );
        $fakePhpXlObj = new \stdClass();
        $this->object->setXlObj($fakePhpXlObj, 0);
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setXlObj
     */
     public function testSetXlObjReaderException() {
        $this->setExpectedException(
            'cymapgt\Exception\SpreadsheetProcessorException',
            'Object of wrong type passed to setXlObj. Type expected is Excel Reader'
        );
        $fakePhpXlObj = new \stdClass();
        $this->object->setXlObj($fakePhpXlObj, 1);
    }
    
    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setXlObj
     */
    public function testSetXlObjWriterException() {
        $this->setExpectedException(
            'cymapgt\Exception\SpreadsheetProcessorException',
            'Object of wrong type passed to setXlObj. Type expected is Excel Writer'
        );
        $fakePhpXlObj = new \stdClass();
        $this->object->setXlObj($fakePhpXlObj, 2);
    }
    
    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::autoConvert
     * @todo   Implement testAutoConvert().
     */
    public function testAutoConvert() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::getNewFileName
     */
    public function testGetNewFileName() {
        //return same name if ovrFlag is on
        $dir         = 'c:/fakedir/';
        $oldFileName = 'randomFile';
        $ext         = 'xlsx';
        $ovrFlag     = true;
        $this->assertEquals('c:/fakedir/randomFile.xlsx', $this->object->getNewFileName($dir, $oldFileName, $ext, $ovrFlag));
        
        //still return same filename if ovrFlag is off and file doesnt exist
        $dir1        = 'c:/fakedir/';
        $oldFileName = 'randomFile';
        $ext         = 'xlsx';
        $ovrFlag     = false;
        $this->assertEquals('c:/fakedir/randomFile.xlsx', $this->object->getNewFileName($dir, $oldFileName, $ext, $ovrFlag));
        
        //now ovrFlag is off and file surerly exists. Should return different name
        $dir         = $this->fileDir;
        $oldFileName = 'test';
        $ext         = 'xlsx';
        $ovrFlag     = false;
        $oldFileFq   = $this->fileDir . $oldFileName . '.' . $ext;
        $this->assertNotEquals($oldFileFq, $this->object->getNewFileName($dir, $oldFileName, $ext, $ovrFlag));  
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::close
     */
    public function testClose() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::flush
     * @todo   Implement testFlush().
     */
    public function testFlush() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::getBaseStream
     * @todo   Test for $this->handle, if file type is CSV.
     */
    public function testGetBaseStream() {
        $baseStream = $this->object->getBaseStream();
        $this->assertEquals(true, ($baseStream instanceof \PHPExcel));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::getExcelAlphaColumn
     */
    public function testGetExcelAlphaColumn() {
        $alphaCol = $this->object->getExcelAlphaColumn(1);
        $this->assertEquals($alphaCol, 'A');
    }
    
    /**
    * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::getExcelAlphaColumn
    */
    public function testGetExcelAlphaColumnException() {
        $this->setExpectedException(
            'cymapgt\Exception\SpreadsheetProcessorException',
            'Input for calculating Excel alpha column should be a positive integer'
        );
        $this->object->getExcelAlphaColumn(-1);
    }   

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::getExcelColumnFromAlpha
     * @todo   Test for the range of characters expected based on latest Excel version
     */
    public function testGetExcelColumnFromAlpha() {
        $col = 'AZ';
        $this->assertEquals(52, $this->object->getExcelColumnFromAlpha($col));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::getExcelAlphanumericColumnRow
     * @todo   Implement testGetExcelAlphanumericColumnRow().
     */
    public function testGetExcelAlphanumericColumnRow() {
        $col = 10;
        $row = 3712;
        
        $this->assertEquals('J3712', $this->object->getExcelAlphanumericColumnRow($col, $row));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::getCellCoord
     * @todo   Some more validation required around this functionality
     */
    public function testGetCellCoord() {
        //coordinate style, forcing a range
        $col = 'A1:';
        $row = 'BC233';
        $isCoordinate = true;
        $this->assertEquals('A1:BC233', $this->object->getCellCoord($col, $row, $isCoordinate));
        
        //no coordinates, picking one cell range
        $col = 3;
        $row = 15;
        $isCoordinate = false;
        $this->assertEquals('C15', $this->object->getCellCoord($col, $row, $isCoordinate));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::open
     */
    public function testOpen() {
        /*default type changed to xl2007 - Cyril 2014.04.30
        $fileName = $this->object->fileName;
        $this->object->close();
        $this->assertEquals(true, $this->object->open($fileName));*/
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );        
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setActiveWorksheet
     */
    public function testSetActiveWorksheet() {
        $activeWorksheet = 0;
        $this->assertEquals(true, $this->object->setActiveWorksheet($activeWorksheet));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::save
     * This method is synonymous with flush()
     */
    public function testSave() {
        $this->assertEquals(true, $this->object->save());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::autoFit
     */
    public function testAutoFit() {
        //default will be column 0
        
        //set a column number
        $this->assertEquals(true, $this->object->autoFit(2));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setBorders
     */
    public function testSetBorders() {
        //set borders
        $this->assertEquals(true, $this->object->setBorders());
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setCellBackColor
     */
    public function testSetCellBackColor() {
        $col = 0;
        $row = 0;
        $rgb = '#FF0011';
        $this->assertEquals(true, $this->object->setCellBackColor($col, $row, $rgb));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setCellTextColor
     */
    public function testSetCellTextColor() {
        $col = 0;
        $row = 1000;
        $rgb = 'AABBCC';
        $this->assertEquals(true, $this->object->setCellTextColor($col, $row, $rgb));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setCellFont
     */
    public function testSetCellFont() {
        $fontName = 'calibri';
        $fontSize = 10;
        $this->assertEquals(true, $this->object->setCellFont($fontName, $fontSize));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setColumnColor
     */
    public function testSetColumnColor() {
        $col = 10;
        $rgb = 'ff2211';
        $this->assertEquals(true, $this->object->setColumnColor($col, $rgb));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setColumnFont
     */
    public function testSetColumnFont() {
        $col = 10;
        $fontName = 'tahoma';
        $fontSize = 10;
        $this->assertEquals(true, $this->object->setColumnFont($col, $fontName, $fontSize));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setHyperlink
     */
    public function testSetHyperlink() {
        $row = 11;
        $col = 11;
        $link = 'http://www.cymapk.com';
        $this->assertEquals(true, $this->object->setHyperlink($col, $row, $link));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setWorksheetName
     */
    public function testSetWorksheetName() {
        $name = 'customName';
        $this->assertEquals(true, $this->object->setWorksheetName($name));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setRowColor
     */
    public function testSetRowColor() {
        $row = 15;
        $rgb = 'F21111';
        $this->assertEquals(true, $this->object->setRowColor($row, $rgb));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setCellTextDirection
     */
    public function testSetCellTextDirection() {
        $row   = 8;
        $col   = 8;
        $dir   = \cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper\PHPExcelTextDirection::Clockwise;
        $angle = 80;
        $this->assertEquals(true, $this->object->setCellTextDirection($col, $row, $dir, $angle));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::setRowFont
     */
    public function testSetRowFont() {
        $row      = 20;
        $fontName = 'verdana';
        $fontSize = 20;
        $this->assertEquals(true, $this->object->setRowFont($row, $fontName, $fontSize));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::writeCell
     */
    public function testWriteCell() {
        $row  = 30;
        $col  = 1;
        $data = 'write here';
        $this->assertEquals(true, $this->object->writeCell($col, $row, $data));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::write
     */
    public function testWrite() {
        $data = array('Some','array','data');
        
        $this->assertEquals(true, $this->object->write($data));
    }

    /**
     * @covers cymapgt\core\application\spreadsheet\SpreadsheetProcessor\PHPExcelWrapper::writeRow
     */
    public function testWriteRow() {
        $row  = 10;
        $data = array('Some','array','data');
        
        $this->assertEquals(true, $this->object->writeRow($row, $data));
    }

}
